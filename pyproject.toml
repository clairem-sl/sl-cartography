[project]
name = "sl-cartography"
version = "0.12"
requires-python = ">=3.11"
description = "Libraries and tools for performing Second Life Cartography"
keywords = ["sl", "secondlife", "second life", "cartography"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved",
    "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment",
    "Topic :: Games/Entertainment :: Multi-User Dungeons (MUD)",
    "Topic :: Games/Entertainment :: Simulation",
    "Topic :: Multimedia :: Graphics :: Capture",
    "Topic :: Utilities",
]
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    {name = "Claire Morgenthau", email = "claire_morgenthau@outlook.com"}
]
dependencies = [
    'uvloop; platform_system == "Linux" and platform_python_implementation == "CPython"',
    "pillow",
    "httpx",
    "httpx[http2]",
    "ruamel.yaml",
    "packaging",
    "tzdata",
    "msgpack",
    "numpy",
    "scikit-image",
#    "appdirs",
#    "beautifulsoup4",
#    "pytz",
]

[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "pytest",
    #
    "setuptools>=40.8.0",
    "wheel",
]

[project.optional-dependencies]
# Dev dependencies.
dev = ["ruff"]

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
]

[tool.ruff]
indent-width = 4
line-length = 120
src = ["src"]

[tool.ruff.lint]
select = [
    'A', 'ANN', 'ARG', 'B', 'C4', 'D', 'DTZ', 'E', 'F', 'FA', 'FIX', 'FLY', 'FURB', 'I', 'ICN', 'LOG', 'PERF', 'PGH',
    'PL', 'PTH', 'RET', 'RUF', 'S', 'SIM', 'SLOT', 'TCH', 'TRY', 'UP', 'YTT'
]
ignore = [
    "ANN101",  # No need to annotate 'self'
    "ANN102",  # No need to annotate 'cls' (in @classmethod)
    "ANN204",  # No need to annotate return values of magic methods
    "D105",  # Do not enforce docstring for magic method; they are mostly self-describing
    "D200",  # Do not force 1-line docstring
    "D204",  # Do not force blank line after class docstring
    "D205",  # Do not demand "1 blank line after docstring summary"
    "D212",  # Do not force docstring summary at first line, so we don't have the ugly indented summary
    "D400",  # Do not enforce period at end of 1st line of docstring ...
    "D415",  # ... or any closing mark for that matter
    "D401",  # I have no idea what "imperative mood" is; so subjective
    "PLR0912",  # "Too many branches (18 > 12)" we shall silent this for now...
    "PLR0913",  # "Too many arguments to function call (12 > 5)" we also shall silent this for now...
    "PLR0915",  # "Too many statements (58 > 50)" ignore as well...
    "S101",  # Don't warn use of 'assert', because we sometimes need to force type detection
    "TRY003",  # Don't complain on long exception message
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true

[tool.ruff.lint.flake8-copyright]
author = "Claire Morgenthau"

[tool.ruff.lint.flake8-import-conventions.aliases]
multiprocessing = "MP"
multiprocessing.managers = "MPMgr"

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["src"]
required-imports = ["from __future__ import annotations"]
